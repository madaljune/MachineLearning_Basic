{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ANN practice 1_Linear regression.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMBAOyNIhAo95FjYjtfCbQd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/madaljune/MachineLearning_Basic/blob/main/ANN_practice_1_Linear_regression.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yxmxEFur1ZNo"
      },
      "source": [
        "#**ANN practice (1) Linear regression with python**\r\n",
        "\r\n",
        "이 과정은 파이썬을 새롭게 공부하는 분들을 위한 것입니다.\r\n",
        "수학적으로는 행렬에 대한 기초 지식, 그리고 프로그래밍적으로는 python과 numpy에 대한 기초 지식을 가지고 있어야 합니다.\r\n",
        "(중간중간 궁금하신 점은 댓글로 달아주시기 바랍니다.)\r\n",
        "\r\n",
        "\r\n",
        "이 모델에서는 신경망에서 일어나는 과정을 알아보기 위하여, 선형회귀(linear regression) 모델을 작성할 예정입니다. 다시 말해, 이 과정에서의 주 목적은 신경망 모델에서 일어나는 순전파(forward propagation)와 역전파(backward propagation)을 이해하는 것이라 할 수 있습니다.\r\n",
        "\r\n",
        "\r\n",
        "(그림)\r\n",
        "\r\n",
        "활성함수(activation function)는 선형함수를 사용합니다.\r\n",
        "\r\n",
        "손실함수(loss function or cost function)는 평균제곱오차(MSE, mean squared error)를 사용합니다.\r\n",
        "\r\n",
        "\r\n",
        "이 문서를 작성하기 위하여, 다음의 서적, 영상 그리고 사이트를 참고하였습니다.\r\n",
        "   1. 타리크 라시드, 신경망 첫걸음\r\n",
        "   2. 윤덕호, 파이썬 날코딩으로 알고 짜는 딥러닝\r\n",
        "   3. https://youtu.be/Hax03rCn3UI?list=PLlMkM4tgfjnLSOjrEJN31gZATbcj_MpUm\r\n",
        "   4. https://youtu.be/TxIVr-nk1so?list=PLlMkM4tgfjnLSOjrEJN31gZATbcj_MpUm\r\n",
        "   5. https://stackoverflow.com/questions/3775032/how-to-update-the-bias-in-neural-network-backpropagation\r\n",
        "   6. https://towardsdatascience.com/neural-network-using-native-python-1d16117486d6\r\n",
        "\r\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wjk5lByk1G9V"
      },
      "source": [
        "import numpy\r\n",
        "import random\r\n",
        "import matplotlib.pyplot as pyplot"
      ],
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rvD4A29C3hdA"
      },
      "source": [
        "주요 라이브러리를 import합니다. \r\n",
        "\r\n",
        "학습을 위해 약어는 최대한 배제하도록 하겠습니다(pyplot 제외).\r\n",
        "\r\n",
        "\r\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A5peVaZL1SGS"
      },
      "source": [
        "class neural_network:\r\n",
        "  def __init__(self, input_nodes_number, output_nodes_number, learning_rate):\r\n",
        "    numpy.random.seed(999) # 항상 동일한 결과를 나타내도록 seed 지정\r\n",
        "\r\n",
        "    # 각 layer 별 노드 수 정의(해당 예제에서는 1개씩 배정됩니다)\r\n",
        "    self.input_nodes_number = input_nodes_number    \r\n",
        "    self.output_nodes_number  =  output_nodes_number\r\n",
        "\r\n",
        "    # 학습률 정의\r\n",
        "    self.learning_rate  = learning_rate\r\n",
        "\r\n",
        "    # 가중치 초기값 생성\r\n",
        "    mean_weight_ini = 1   # 초기값을 만들 때 random 모듈의 정균분포(normal distribution)를 이용할 것입니다.\r\n",
        "    std_weight_ini  = 0.5 # 무작위 수를 뽑아내도 크게 상관없지만, 해와 너무 동떨어지게 되면 정확성이 떨어질 수 있기 때문입니다.\r\n",
        "\r\n",
        "    self.weight_input_output  = numpy.random.normal(mean_weight_ini, std_weight_ini, (self.output_nodes_number, self.input_nodes_number))\r\n",
        "    self.bias_input_output  = numpy.random.normal(mean_weight_ini, std_weight_ini, (1, self.output_nodes_number))\r\n",
        "        # 각 가중치 행렬의 개수는 아래에서 설명드리겠습니다.\r\n",
        "    \r\n",
        "  def train(self, x_train, y_train, epoch):\r\n",
        "    N=len(x_train)  \r\n",
        "\r\n",
        "    total_error_squared = 0\r\n",
        "    for i_nn in range(N):      \r\n",
        "      inputs = x_train[i_nn]\r\n",
        "      targets = y_train[i_nn]     \r\n",
        "\r\n",
        "      final_inputs = numpy.dot(self.weight_input_output, inputs) + self.bias_input_output\r\n",
        "      final_outputs = activation_function(final_inputs)\r\n",
        "\r\n",
        "      output_errors = final_outputs - targets\r\n",
        "      total_error_squared += output_errors**2     \r\n",
        "\r\n",
        "    # 가중치 업데이트\r\n",
        "      self.weight_input_output += -2/N * self.learning_rate * output_errors * inputs\r\n",
        "      self.bias_input_output += -2/N * self.learning_rate * output_errors\r\n",
        "      \r\n",
        "    \r\n",
        "    print('Epoch #', epoch,', MSE = ', total_error_squared/N )\r\n",
        "    print('\\t a_nn=', self.weight_input_output)\r\n",
        "    print('\\t b_nn=', self.bias_input_output)\r\n",
        "\r\n",
        "  def query(self, x): \r\n",
        "    N = len(x)\r\n",
        "    outputs = numpy.zeros(N)\r\n",
        "\r\n",
        "    for i_nn in range(N):  \r\n",
        "      inputs = x[i_nn]\r\n",
        "\r\n",
        "      final_inputs = numpy.dot(self.weight_input_output, inputs) + self.bias_input_output\r\n",
        "      final_outputs = activation_function(final_inputs)\r\n",
        "\r\n",
        "      outputs[i_nn] = final_outputs \r\n",
        "\r\n",
        "    return outputs\r\n",
        "\r\n",
        "def activation_function(x):\r\n",
        "  return linear(x)\r\n",
        "\r\n",
        "def linear(x):\r\n",
        "  return x\r\n",
        "\r\n",
        "def data_set(x, a, b):\r\n",
        "  numpy.random.seed(999)\r\n",
        "\r\n",
        "  N = len(x)  \r\n",
        "  y_target = numpy.zeros((N,1))\r\n",
        "  y_noise  = numpy.zeros((N,1))\r\n",
        "\r\n",
        "  mu = 0\r\n",
        "  std = 1.5\r\n",
        " \r\n",
        "  y_target = a*x + b\r\n",
        "  y_noise = y_target + numpy.random.normal(mu, std, N)\r\n",
        "\r\n",
        "  return y_target, y_noise  "
      ],
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hz5k-1tBSk7g"
      },
      "source": [
        "# Data set\r\n",
        "x = numpy.arange(-10,10,1)\r\n",
        "N = len(x)\r\n",
        "a=1\r\n",
        "b=1\r\n",
        "y_target, y_noise = data_set(x,a,b)"
      ],
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SXAlRPmSS3ud"
      },
      "source": [
        "# Neural network: compile\r\n",
        "x_train = x\r\n",
        "y_train = y_noise\r\n",
        "\r\n",
        "input_nodes_number = 1\r\n",
        "output_nodes_number = 1\r\n",
        "learning_rate = 0.1\r\n",
        "\r\n",
        "neural_network_model = neural_network(input_nodes_number, output_nodes_number, learning_rate)"
      ],
      "execution_count": 147,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cJcurTogTTZN",
        "outputId": "8453bec6-3d75-45e0-fcb3-7182d5a40e0e"
      },
      "source": [
        "# Neural network: train\r\n",
        "N_epoch = 10\r\n",
        "for epoch in range(N_epoch):\r\n",
        "  neural_network_model.train(x_train, y_train, epoch)  "
      ],
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch # 0 , MSE =  [[3.02219174]]\n",
            "\t a_nn= [[0.85017651]]\n",
            "\t b_nn= [[1.60727239]]\n",
            "Epoch # 1 , MSE =  [[3.12507632]]\n",
            "\t a_nn= [[0.86136301]]\n",
            "\t b_nn= [[1.50739535]]\n",
            "Epoch # 2 , MSE =  [[3.02838337]]\n",
            "\t a_nn= [[0.87097056]]\n",
            "\t b_nn= [[1.42161373]]\n",
            "Epoch # 3 , MSE =  [[2.95836872]]\n",
            "\t a_nn= [[0.87922222]]\n",
            "\t b_nn= [[1.34793825]]\n",
            "Epoch # 4 , MSE =  [[2.90784812]]\n",
            "\t a_nn= [[0.88630934]]\n",
            "\t b_nn= [[1.2846604]]\n",
            "Epoch # 5 , MSE =  [[2.87154857]]\n",
            "\t a_nn= [[0.89239628]]\n",
            "\t b_nn= [[1.23031279]]\n",
            "Epoch # 6 , MSE =  [[2.84560279]]\n",
            "\t a_nn= [[0.89762418]]\n",
            "\t b_nn= [[1.18363513]]\n",
            "Epoch # 7 , MSE =  [[2.82717731]]\n",
            "\t a_nn= [[0.90211428]]\n",
            "\t b_nn= [[1.14354496]]\n",
            "Epoch # 8 , MSE =  [[2.81419855]]\n",
            "\t a_nn= [[0.9059707]]\n",
            "\t b_nn= [[1.10911262]]\n",
            "Epoch # 9 , MSE =  [[2.8051511]]\n",
            "\t a_nn= [[0.90928288]]\n",
            "\t b_nn= [[1.07953962]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "JhiFwaNWToN8",
        "outputId": "160477ca-45ed-41e2-a905-679efb4aafd3"
      },
      "source": [
        "# Neural network: vrification\r\n",
        "x_pred = numpy.random.rand(10,1)*20-10\r\n",
        "y_answer = a * x_pred + b\r\n",
        "y_pred = numpy.transpose(neural_network_model.query(x_pred))\r\n",
        "\r\n",
        "pyplot.plot(x, y_noise, 'ro', markersize = 4, markerfacecolor = 'none')\r\n",
        "pyplot.plot(x_pred, y_answer, '--', linewidth = 1, color='black')\r\n",
        "pyplot.plot(x_pred, y_pred, 'bo', markersize = 4, markerfacecolor = 'none')\r\n",
        "pyplot.show()"
      ],
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
